# cython: boundscheck=False
# cython: initializedcheck=False
# cython: wraparound=False
# cython: cdivision=True
# cython: cpow=True
import numpy as np
cimport numpy as cnp

from libc.math cimport abs, log, exp, cos, sin, atan, sqrt

# Quick type converters ala _complexstuff.h
ctypedef union _np_c_cplx_union:
    cnp.npy_cdouble npy
    double complex cpp

cdef inline cnp.npy_cdouble to_cdouble(double complex x) noexcept nogil:
    cdef _np_c_cplx_union z
    z.cpp = x
    return z.npy

cdef inline double complex to_dcomplex(cnp.npy_cdouble x) noexcept nogil:
    cdef _np_c_cplx_union z
    z.npy = x
    return z.cpp

cdef extern from "numpy/npy_math.h":
    double INF "NPY_INFINITY"
    double PI "NPY_PI"
    double PI_2 "NPY_PI_2"
    double PI_4 "NPY_PI_4"
    double NPY_1_PI
    double npy_cabs(cnp.npy_cdouble z) nogil
    double npy_carg(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_clog(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_cexp(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_csin(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_ccos(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_csqrt(cnp.npy_cdouble z) nogil
    cnp.npy_cdouble npy_cpow(cnp.npy_cdouble x, cnp.npy_cdouble y) nogil

# regularized complex functions working with double complex
# instead of fighting with libc, npy_cdouble and MSVC
cdef inline double complex cclog(double complex z) noexcept nogil:
    return to_dcomplex(npy_clog(to_cdouble(z)))

cdef inline double complex ccexp(double complex z) noexcept nogil:
    return to_dcomplex(npy_cexp(to_cdouble(z)))

cdef inline double ccabs(double complex z) noexcept nogil:
    return npy_cabs(to_cdouble(z))

cdef inline double complex ccsqrt(double complex z) noexcept nogil:
    return to_dcomplex(npy_csqrt(to_cdouble(z)))

cdef double[5] d1mach = [np.finfo(np.float64).tiny,
                         np.finfo(np.float64).max,
                         0.5 * np.finfo(np.float64).eps,
                         np.finfo(np.float64).eps,
                         np.log10(2)]

cdef int[16] i1mach = [5, 6, 7, 0, 32, 4, 2, 31,
                       2147483647, 2, 24, -126, 128, 53, -1021, 1024]

cdef double[14] zunhj_ar = [1.00000000000000000e+00, 1.04166666666666667e-01,
                            8.35503472222222222e-02, 1.28226574556327160e-01,
                            2.91849026464140464e-01, 8.81627267443757652e-01,
                            3.32140828186276754e+00, 1.49957629868625547e+01,
                            7.89230130115865181e+01, 4.74451538868264323e+02,
                            3.20749009089066193e+03, 2.40865496408740049e+04,
                            1.98923119169509794e+05, 1.79190200777534383e+06]

cdef double[14] zunhj_br = [ 1.00000000000000000e+00, -1.45833333333333333e-01,
                            -9.87413194444444444e-02, -1.43312053915895062e-01,
                            -3.17227202678413548e-01, -9.42429147957120249e-01,
                            -3.51120304082635426e+00, -1.57272636203680451e+01,
                            -8.22814390971859444e+01, -4.92355370523670524e+02,
                            -3.31621856854797251e+03, -2.48276742452085896e+04,
                            -2.04526587315129788e+05, -1.83844491706820990e+06]

cdef double[105] zunhj_c = [ 1.00000000000000000e+00, -2.08333333333333333e-01,
                             1.25000000000000000e-01,  3.34201388888888889e-01,
                            -4.01041666666666667e-01,  7.03125000000000000e-02,
                            -1.02581259645061728e+00,  1.84646267361111111e+00,
                            -8.91210937500000000e-01,  7.32421875000000000e-02,
                             4.66958442342624743e+00, -1.12070026162229938e+01,
                             8.78912353515625000e+00, -2.36408691406250000e+00,
                             1.12152099609375000e-01, -2.82120725582002449e+01,
                             8.46362176746007346e+01, -9.18182415432400174e+01,
                             4.25349987453884549e+01, -7.36879435947963170e+00,
                             2.27108001708984375e-01,  2.12570130039217123e+02,
                            -7.65252468141181642e+02,  1.05999045252799988e+03,
                            -6.99579627376132541e+02,  2.18190511744211590e+02,
                            -2.64914304869515555e+01,  5.72501420974731445e-01,
                            -1.91945766231840700e+03,  8.06172218173730938e+03,
                            -1.35865500064341374e+04,  1.16553933368645332e+04,
                            -5.30564697861340311e+03,  1.20090291321635246e+03,
                            -1.08090919788394656e+02,  1.72772750258445740e+00,
                             2.02042913309661486e+04, -9.69805983886375135e+04,
                             1.92547001232531532e+05, -2.03400177280415534e+05,
                             1.22200464983017460e+05, -4.11926549688975513e+04,
                             7.10951430248936372e+03, -4.93915304773088012e+02,
                             6.07404200127348304e+00, -2.42919187900551333e+05,
                             1.31176361466297720e+06, -2.99801591853810675e+06,
                             3.76327129765640400e+06, -2.81356322658653411e+06,
                             1.26836527332162478e+06, -3.31645172484563578e+05,
                             4.52187689813627263e+04, -2.49983048181120962e+03,
                             2.43805296995560639e+01,  3.28446985307203782e+06,
                            -1.97068191184322269e+07,  5.09526024926646422e+07,
                            -7.41051482115326577e+07,  6.63445122747290267e+07,
                            -3.75671766607633513e+07,  1.32887671664218183e+07,
                            -2.78561812808645469e+06,  3.08186404612662398e+05,
                            -1.38860897537170405e+04,  1.10017140269246738e+02,
                            -4.93292536645099620e+07,  3.25573074185765749e+08,
                            -9.39462359681578403e+08,  1.55359689957058006e+09,
                            -1.62108055210833708e+09,  1.10684281682301447e+09,
                            -4.95889784275030309e+08,  1.42062907797533095e+08,
                            -2.44740627257387285e+07,  2.24376817792244943e+06,
                            -8.40054336030240853e+04,  5.51335896122020586e+02,
                             8.14789096118312115e+08, -5.86648149205184723e+09,
                             1.86882075092958249e+10, -3.46320433881587779e+10,
                             4.12801855797539740e+10, -3.30265997498007231e+10,
                             1.79542137311556001e+10, -6.56329379261928433e+09,
                             1.55927986487925751e+09, -2.25105661889415278e+08,
                             1.73951075539781645e+07, -5.49842327572288687e+05,
                             3.03809051092238427e+03, -1.46792612476956167e+10,
                             1.14498237732025810e+11, -3.99096175224466498e+11,
                             8.19218669548577329e+11, -1.09837515608122331e+12,
                             1.00815810686538209e+12, -6.45364869245376503e+11,
                             2.87900649906150589e+11, -8.78670721780232657e+10,
                             1.76347306068349694e+10, -2.16716498322379509e+09,
                             1.43157876718888981e+08, -3.87183344257261262e+06,
                             1.82577554742931747e+04]

cdef double[180] zunhj_alfa = [-4.44444444444444444e-03, -9.22077922077922078e-04,
                               -8.84892884892884893e-05,  1.65927687832449737e-04,
                                2.46691372741792910e-04,  2.65995589346254780e-04,
                                2.61824297061500945e-04,  2.48730437344655609e-04,
                                2.32721040083232098e-04,  2.16362485712365082e-04,
                                2.00738858762752355e-04,  1.86267636637545172e-04,
                                1.73060775917876493e-04,  1.61091705929015752e-04,
                                1.50274774160908134e-04,  1.40503497391269794e-04,
                                1.31668816545922806e-04,  1.23667445598253261e-04,
                                1.16405271474737902e-04,  1.09798298372713369e-04,
                                1.03772410422992823e-04,  9.82626078369363448e-05,
                                9.32120517249503256e-05,  8.85710852478711718e-05,
                                8.42963105715700223e-05,  8.03497548407791151e-05,
                                7.66981345359207388e-05,  7.33122157481777809e-05,
                                7.01662625163141333e-05,  6.72375633790160292e-05,
                                6.93735541354588974e-04,  2.32241745182921654e-04,
                               -1.41986273556691197e-05, -1.16444931672048640e-04,
                               -1.50803558053048762e-04, -1.55121924918096223e-04,
                               -1.46809756646465549e-04, -1.33815503867491367e-04,
                               -1.19744975684254051e-04, -1.06184319207974020e-04,
                               -9.37699549891194492e-05, -8.26923045588193274e-05,
                               -7.29374348155221211e-05, -6.44042357721016283e-05,
                               -5.69611566009369048e-05, -5.04731044303561628e-05,
                               -4.48134868008882786e-05, -3.98688727717598864e-05,
                               -3.55400532972042498e-05, -3.17414256609022480e-05,
                               -2.83996793904174811e-05, -2.54522720634870566e-05,
                               -2.28459297164724555e-05, -2.05352753106480604e-05,
                               -1.84816217627666085e-05, -1.66519330021393806e-05,
                               -1.50179412980119482e-05, -1.35554031379040526e-05,
                               -1.22434746473858131e-05, -1.10641884811308169e-05,
                               -3.54211971457743841e-04, -1.56161263945159416e-04,
                                3.04465503594936410e-05,  1.30198655773242693e-04,
                                1.67471106699712269e-04,  1.70222587683592569e-04,
                                1.56501427608594704e-04,  1.36339170977445120e-04,
                                1.14886692029825128e-04,  9.45869093034688111e-05,
                                7.64498419250898258e-05,  6.07570334965197354e-05,
                                4.74394299290508799e-05,  3.62757512005344297e-05,
                                2.69939714979224901e-05,  1.93210938247939253e-05,
                                1.30056674793963203e-05,  7.82620866744496661e-06,
                                3.59257485819351583e-06,  1.44040049814251817e-07,
                               -2.65396769697939116e-06, -4.91346867098485910e-06,
                               -6.72739296091248287e-06, -8.17269379678657923e-06,
                               -9.31304715093561232e-06, -1.02011418798016441e-05,
                               -1.08805962510592880e-05, -1.13875481509603555e-05,
                               -1.17519675674556414e-05, -1.19987364870944141e-05,
                                3.78194199201772914e-04,  2.02471952761816167e-04,
                               -6.37938506318862408e-05, -2.38598230603005903e-04,
                               -3.10916256027361568e-04, -3.13680115247576316e-04,
                               -2.78950273791323387e-04, -2.28564082619141374e-04,
                               -1.75245280340846749e-04, -1.25544063060690348e-04,
                               -8.22982872820208365e-05, -4.62860730588116458e-05,
                               -1.72334302366962267e-05,  5.60690482304602267e-06,
                                2.31395443148286800e-05,  3.62642745856793957e-05,
                                4.58006124490188752e-05,  5.24595294959114050e-05,
                                5.68396208545815266e-05,  5.94349820393104052e-05,
                                6.06478527578421742e-05,  6.08023907788436497e-05,
                                6.01577894539460388e-05,  5.89199657344698500e-05,
                                5.72515823777593053e-05,  5.52804375585852577e-05,
                                5.31063773802880170e-05,  5.08069302012325706e-05,
                                4.84418647620094842e-05,  4.60568581607475370e-05,
                               -6.91141397288294174e-04, -4.29976633058871912e-04,
                                1.83067735980039018e-04,  6.60088147542014144e-04,
                                8.75964969951185931e-04,  8.77335235958235514e-04,
                                7.49369585378990637e-04,  5.63832329756980918e-04,
                                3.68059319971443156e-04,  1.88464535514455599e-04,
                                3.70663057664904149e-05, -8.28520220232137023e-05,
                               -1.72751952869172998e-04, -2.36314873605872983e-04,
                               -2.77966150694906658e-04, -3.02079514155456919e-04,
                               -3.12594712643820127e-04, -3.12872558758067163e-04,
                               -3.05678038466324377e-04, -2.93226470614557331e-04,
                               -2.77255655582934777e-04, -2.59103928467031709e-04,
                               -2.39784014396480342e-04, -2.20048260045422848e-04,
                               -2.00443911094971498e-04, -1.81358692210970687e-04,
                               -1.63057674478657464e-04, -1.45712672175205844e-04,
                               -1.29425421983924587e-04, -1.14245691942445952e-04,
                                1.92821964248775885e-03,  1.35592576302022234e-03,
                               -7.17858090421302995e-04, -2.58084802575270346e-03,
                               -3.49271130826168475e-03, -3.46986299340960628e-03,
                               -2.82285233351310182e-03, -1.88103076404891354e-03,
                               -8.89531718383947600e-04,  3.87912102631035228e-06,
                                7.28688540119691412e-04,  1.26566373053457758e-03,
                                1.62518158372674427e-03,  1.83203153216373172e-03,
                                1.91588388990527909e-03,  1.90588846755546138e-03,
                                1.82798982421825727e-03,  1.70389506421121530e-03,
                                1.55097127171097686e-03,  1.38261421852276159e-03,
                                1.20881424230064774e-03,  1.03676532638344962e-03,
                                8.71437918068619115e-04,  7.16080155297701002e-04,
                                5.72637002558129372e-04,  4.42089819465802277e-04,
                                3.24724948503090564e-04,  2.20342042730246599e-04,
                                1.28412898401353882e-04,  4.82005924552095464e-05]

cdef double[210] zunhj_beta = [1.79988721413553309e-02,  5.59964911064388073e-03,
                               2.88501402231132779e-03,  1.80096606761053941e-03,
                               1.24753110589199202e-03,  9.22878876572938311e-04,
                               7.14430421727287357e-04,  5.71787281789704872e-04,
                               4.69431007606481533e-04,  3.93232835462916638e-04,
                               3.34818889318297664e-04,  2.88952148495751517e-04,
                               2.52211615549573284e-04,  2.22280580798883327e-04,
                               1.97541838033062524e-04,  1.76836855019718004e-04,
                               1.59316899661821081e-04,  1.44347930197333986e-04,
                               1.31448068119965379e-04,  1.20245444949302884e-04,
                               1.10449144504599392e-04,  1.01828770740567258e-04,
                               9.41998224204237509e-05,  8.74130545753834437e-05,
                               8.13466262162801467e-05,  7.59002269646219339e-05,
                               7.09906300634153481e-05,  6.65482874842468183e-05,
                               6.25146958969275078e-05,  5.88403394426251749e-05,
                              -1.49282953213429172e-03, -8.78204709546389328e-04,
                              -5.02916549572034614e-04, -2.94822138512746025e-04,
                              -1.75463996970782828e-04, -1.04008550460816434e-04,
                              -5.96141953046457895e-05, -3.12038929076098340e-05,
                              -1.26089735980230047e-05, -2.42892608575730389e-07,
                               8.05996165414273571e-06,  1.36507009262147391e-05,
                               1.73964125472926261e-05,  1.98672978842133780e-05,
                               2.14463263790822639e-05,  2.23954659232456514e-05,
                               2.28967783814712629e-05,  2.30785389811177817e-05,
                               2.30321976080909144e-05,  2.28236073720348722e-05,
                               2.25005881105292418e-05,  2.20981015361991429e-05,
                               2.16418427448103905e-05,  2.11507649256220843e-05,
                               2.06388749782170737e-05,  2.01165241997081666e-05,
                               1.95913450141179244e-05,  1.90689367910436740e-05,
                               1.85533719641636667e-05,  1.80475722259674218e-05,
                               5.52213076721292790e-04,  4.47932581552384646e-04,
                               2.79520653992020589e-04,  1.52468156198446602e-04,
                               6.93271105657043598e-05,  1.76258683069991397e-05,
                              -1.35744996343269136e-05, -3.17972413350427135e-05,
                              -4.18861861696693365e-05, -4.69004889379141029e-05,
                              -4.87665447413787352e-05, -4.87010031186735069e-05,
                              -4.74755620890086638e-05, -4.55813058138628452e-05,
                              -4.33309644511266036e-05, -4.09230193157750364e-05,
                              -3.84822638603221274e-05, -3.60857167535410501e-05,
                              -3.37793306123367417e-05, -3.15888560772109621e-05,
                              -2.95269561750807315e-05, -2.75978914828335759e-05,
                              -2.58006174666883713e-05, -2.41308356761280200e-05,
                              -2.25823509518346033e-05, -2.11479656768912971e-05,
                              -1.98200638885294927e-05, -1.85909870801065077e-05,
                              -1.74532699844210224e-05, -1.63997823854497997e-05,
                              -4.74617796559959808e-04, -4.77864567147321487e-04,
                              -3.20390228067037603e-04, -1.61105016119962282e-04,
                              -4.25778101285435204e-05,  3.44571294294967503e-05,
                               7.97092684075674924e-05,  1.03138236708272200e-04,
                               1.12466775262204158e-04,  1.13103642108481389e-04,
                               1.08651634848774268e-04,  1.01437951597661973e-04,
                               9.29298396593363896e-05,  8.40293133016089978e-05,
                               7.52727991349134062e-05,  6.69632521975730872e-05,
                               5.92564547323194704e-05,  5.22169308826975567e-05,
                               4.58539485165360646e-05,  4.01445513891486808e-05,
                               3.50481730031328081e-05,  3.05157995034346659e-05,
                               2.64956119950516039e-05,  2.29363633690998152e-05,
                               1.97893056664021636e-05,  1.70091984636412623e-05,
                               1.45547428261524004e-05,  1.23886640995878413e-05,
                               1.04775876076583236e-05,  8.79179954978479373e-06,
                               7.36465810572578444e-04,  8.72790805146193976e-04,
                               6.22614862573135066e-04,  2.85998154194304147e-04,
                               3.84737672879366102e-06, -1.87906003636971558e-04,
                              -2.97603646594554535e-04, -3.45998126832656348e-04,
                              -3.53382470916037712e-04, -3.35715635775048757e-04,
                              -3.04321124789039809e-04, -2.66722723047612821e-04,
                              -2.27654214122819527e-04, -1.89922611854562356e-04,
                              -1.55058918599093870e-04, -1.23778240761873630e-04,
                              -9.62926147717644187e-05, -7.25178327714425337e-05,
                              -5.22070028895633801e-05, -3.50347750511900522e-05,
                              -2.06489761035551757e-05, -8.70106096849767054e-06,
                               1.13698686675100290e-06,  9.16426474122778849e-06,
                               1.56477785428872620e-05,  2.08223629482466847e-05,
                               2.48923381004595156e-05,  2.80340509574146325e-05,
                               3.03987774629861915e-05,  3.21156731406700616e-05,
                              -1.80182191963885708e-03, -2.43402962938042533e-03,
                              -1.83422663549856802e-03, -7.62204596354009765e-04,
                               2.39079475256927218e-04,  9.49266117176881141e-04,
                               1.34467449701540359e-03,  1.48457495259449178e-03,
                               1.44732339830617591e-03,  1.30268261285657186e-03,
                               1.10351597375642682e-03,  8.86047440419791759e-04,
                               6.73073208165665473e-04,  4.77603872856582378e-04,
                               3.05991926358789362e-04,  1.60315694594721630e-04,
                               4.00749555270613286e-05, -5.66607461635251611e-05,
                              -1.32506186772982638e-04, -1.90296187989614057e-04,
                              -2.32811450376937408e-04, -2.62628811464668841e-04,
                              -2.82050469867598672e-04, -2.93081563192861167e-04,
                              -2.97435962176316616e-04, -2.96557334239348078e-04,
                              -2.91647363312090861e-04, -2.83696203837734166e-04,
                              -2.73512317095673346e-04, -2.61750155806768580e-04,
                               6.38585891212050914e-03,  9.62374215806377941e-03,
                               7.61878061207001043e-03,  2.83219055545628054e-03,
                              -2.09841352012720090e-03, -5.73826764216626498e-03,
                              -7.70804244495414620e-03, -8.21011692264844401e-03,
                              -7.65824520346905413e-03, -6.47209729391045177e-03,
                              -4.99132412004966473e-03, -3.45612289713133280e-03,
                              -2.01785580014170775e-03, -7.59430686781961401e-04,
                               2.84173631523859138e-04,  1.10891667586337403e-03,
                               1.72901493872728771e-03,  2.16812590802684701e-03,
                               2.45357710494539735e-03,  2.61281821058334862e-03,
                               2.67141039656276912e-03,  2.65203073395980430e-03,
                               2.57411652877287315e-03,  2.45389126236094427e-03,
                               2.30460058071795494e-03,  2.13684837686712662e-03,
                               1.95896528478870911e-03,  1.77737008679454412e-03,
                               1.59690280765839059e-03,  1.42111975664438546e-03]

cdef double[30] zunhj_gama = [6.29960524947436582e-01, 2.51984209978974633e-01,
                              1.54790300415655846e-01, 1.10713062416159013e-01,
                              8.57309395527394825e-02, 6.97161316958684292e-02,
                              5.86085671893713576e-02, 5.04698873536310685e-02,
                              4.42600580689154809e-02, 3.93720661543509966e-02,
                              3.54283195924455368e-02, 3.21818857502098231e-02,
                              2.94646240791157679e-02, 2.71581677112934479e-02,
                              2.51768272973861779e-02, 2.34570755306078891e-02,
                              2.19508390134907203e-02, 2.06210828235646240e-02,
                              1.94388240897880846e-02, 1.83810633800683158e-02,
                              1.74293213231963172e-02, 1.65685837786612353e-02,
                              1.57865285987918445e-02, 1.50729501494095594e-02,
                              1.44193250839954639e-02, 1.38184805735341786e-02,
                              1.32643378994276568e-02, 1.27517121970498651e-02,
                              1.22761545318762767e-02, 1.18338262398482403e-02]

cdef double[120] zunik_c = [1.00000000000000000e+00, -2.08333333333333333e-01,
                            1.25000000000000000e-01,  3.34201388888888889e-01,
                            -4.01041666666666667e-01,  7.03125000000000000e-02,
                            -1.02581259645061728e+00,  1.84646267361111111e+00,
                            -8.91210937500000000e-01,  7.32421875000000000e-02,
                            4.66958442342624743e+00, -1.12070026162229938e+01,
                            8.78912353515625000e+00, -2.36408691406250000e+00,
                            1.12152099609375000e-01, -2.82120725582002449e+01,
                            8.46362176746007346e+01, -9.18182415432400174e+01,
                            4.25349987453884549e+01, -7.36879435947963170e+00,
                            2.27108001708984375e-01,  2.12570130039217123e+02,
                            -7.65252468141181642e+02,  1.05999045252799988e+03,
                            -6.99579627376132541e+02,  2.18190511744211590e+02,
                            -2.64914304869515555e+01,  5.72501420974731445e-01,
                            -1.91945766231840700e+03,  8.06172218173730938e+03,
                            -1.35865500064341374e+04,  1.16553933368645332e+04,
                            -5.30564697861340311e+03,  1.20090291321635246e+03,
                            -1.08090919788394656e+02,  1.72772750258445740e+00,
                            2.02042913309661486e+04, -9.69805983886375135e+04,
                            1.92547001232531532e+05, -2.03400177280415534e+05,
                            1.22200464983017460e+05, -4.11926549688975513e+04,
                            7.10951430248936372e+03, -4.93915304773088012e+02,
                            6.07404200127348304e+00, -2.42919187900551333e+05,
                            1.31176361466297720e+06, -2.99801591853810675e+06,
                            3.76327129765640400e+06, -2.81356322658653411e+06,
                            1.26836527332162478e+06, -3.31645172484563578e+05,
                            4.52187689813627263e+04, -2.49983048181120962e+03,
                            2.43805296995560639e+01,  3.28446985307203782e+06,
                            -1.97068191184322269e+07,  5.09526024926646422e+07,
                            -7.41051482115326577e+07,  6.63445122747290267e+07,
                            -3.75671766607633513e+07,  1.32887671664218183e+07,
                            -2.78561812808645469e+06,  3.08186404612662398e+05,
                            -1.38860897537170405e+04,  1.10017140269246738e+02,
                            -4.93292536645099620e+07,  3.25573074185765749e+08,
                            -9.39462359681578403e+08,  1.55359689957058006e+09,
                            -1.62108055210833708e+09,  1.10684281682301447e+09,
                            -4.95889784275030309e+08,  1.42062907797533095e+08,
                            -2.44740627257387285e+07,  2.24376817792244943e+06,
                            -8.40054336030240853e+04,  5.51335896122020586e+02,
                            8.14789096118312115e+08, -5.86648149205184723e+09,
                            1.86882075092958249e+10, -3.46320433881587779e+10,
                            4.12801855797539740e+10, -3.30265997498007231e+10,
                            1.79542137311556001e+10, -6.56329379261928433e+09,
                            1.55927986487925751e+09, -2.25105661889415278e+08,
                            1.73951075539781645e+07, -5.49842327572288687e+05,
                            3.03809051092238427e+03, -1.46792612476956167e+10,
                            1.14498237732025810e+11, -3.99096175224466498e+11,
                            8.19218669548577329e+11, -1.09837515608122331e+12,
                            1.00815810686538209e+12, -6.45364869245376503e+11,
                            2.87900649906150589e+11, -8.78670721780232657e+10,
                            1.76347306068349694e+10, -2.16716498322379509e+09,
                            1.43157876718888981e+08, -3.87183344257261262e+06,
                            1.82577554742931747e+04,  2.86464035717679043e+11,
                            -2.40629790002850396e+12,  9.10934118523989896e+12,
                            -2.05168994109344374e+13,  3.05651255199353206e+13,
                            -3.16670885847851584e+13,  2.33483640445818409e+13,
                            -1.23204913055982872e+13,  4.61272578084913197e+12,
                            -1.19655288019618160e+12,  2.05914503232410016e+11,
                            -2.18229277575292237e+10,  1.24700929351271032e+09,
                            -2.91883881222208134e+07,  1.18838426256783253e+05]

cdef double[100] dgamln_gln =  [0.00000000000000000e+00, 0.00000000000000000e+00,
                                6.93147180559945309e-01, 1.79175946922805500e+00,
                                3.17805383034794562e+00, 4.78749174278204599e+00,
                                6.57925121201010100e+00, 8.52516136106541430e+00,
                                1.06046029027452502e+01, 1.28018274800814696e+01,
                                1.51044125730755153e+01, 1.75023078458738858e+01,
                                1.99872144956618861e+01, 2.25521638531234229e+01,
                                2.51912211827386815e+01, 2.78992713838408916e+01,
                                3.06718601060806728e+01, 3.35050734501368889e+01,
                                3.63954452080330536e+01, 3.93398841871994940e+01,
                                4.23356164607534850e+01, 4.53801388984769080e+01,
                                4.84711813518352239e+01, 5.16066755677643736e+01,
                                5.47847293981123192e+01, 5.80036052229805199e+01,
                                6.12617017610020020e+01, 6.45575386270063311e+01,
                                6.78897431371815350e+01, 7.12570389671680090e+01,
                                7.46582363488301644e+01, 7.80922235533153106e+01,
                                8.15579594561150372e+01, 8.50544670175815174e+01,
                                8.85808275421976788e+01, 9.21361756036870925e+01,
                                9.57196945421432025e+01, 9.93306124547874269e+01,
                                1.02968198614513813e+02, 1.06631760260643459e+02,
                                1.10320639714757395e+02, 1.14034211781461703e+02,
                                1.17771881399745072e+02, 1.21533081515438634e+02,
                                1.25317271149356895e+02, 1.29123933639127215e+02,
                                1.32952575035616310e+02, 1.36802722637326368e+02,
                                1.40673923648234259e+02, 1.44565743946344886e+02,
                                1.48477766951773032e+02, 1.52409592584497358e+02,
                                1.56360836303078785e+02, 1.60331128216630907e+02,
                                1.64320112263195181e+02, 1.68327445448427652e+02,
                                1.72352797139162802e+02, 1.76395848406997352e+02,
                                1.80456291417543771e+02, 1.84533828861449491e+02,
                                1.88628173423671591e+02, 1.92739047287844902e+02,
                                1.96866181672889994e+02, 2.01009316399281527e+02,
                                2.05168199482641199e+02, 2.09342586752536836e+02,
                                2.13532241494563261e+02, 2.17736934113954227e+02,
                                2.21956441819130334e+02, 2.26190548323727593e+02,
                                2.30439043565776952e+02, 2.34701723442818268e+02,
                                2.38978389561834323e+02, 2.43268849002982714e+02,
                                2.47572914096186884e+02, 2.51890402209723194e+02,
                                2.56221135550009525e+02, 2.60564940971863209e+02,
                                2.64921649798552801e+02, 2.69291097651019823e+02,
                                2.73673124285693704e+02, 2.78067573440366143e+02,
                                2.82474292687630396e+02, 2.86893133295426994e+02,
                                2.91323950094270308e+02, 2.95766601350760624e+02,
                                3.00220948647014132e+02, 3.04686856765668715e+02,
                                3.09164193580146922e+02, 3.13652829949879062e+02,
                                3.18152639620209327e+02, 3.22663499126726177e+02,
                                3.27185287703775217e+02, 3.31717887196928473e+02,
                                3.36261181979198477e+02, 3.40815058870799018e+02,
                                3.45379407062266854e+02, 3.49954118040770237e+02,
                                3.54539085519440809e+02, 3.59134205369575399e+02]

cdef double[22] dgamln_cf =  [8.33333333333333333e-02, -2.77777777777777778e-03,
                              7.93650793650793651e-04, -5.95238095238095238e-04,
                              8.41750841750841751e-04, -1.91752691752691753e-03,
                              6.41025641025641026e-03, -2.95506535947712418e-02,
                              1.79644372368830573e-01, -1.39243221690590112e+00,
                              1.34028640441683920e+01, -1.56848284626002017e+02,
                              2.19310333333333333e+03, -3.61087712537249894e+04,
                              6.91472268851313067e+05, -1.52382215394074162e+07,
                              3.82900751391414141e+08, -1.08822660357843911e+10,
                              3.47320283765002252e+11, -1.23696021422692745e+13,
                              4.88788064793079335e+14, -2.13203339609193739e+16]


# %% --------------------------------------------------------------------------- zasyi
cdef inline int zasyi(double complex z,
                       double fnu,
                       int kode,
                       int n,
                       double complex *y,
                       double rl,
                       double tol,
                       double elim
                      ) noexcept nogil:

    cdef double aa, ak, dfnu
    cdef int i, ib, il, inu, j, jl, k, koded, m, nn
    cdef double complex ak1, ck, cs1, cs2, cz, dk, ez, p1, rz, st, tz, zr
    cdef double rtpi = 0.5*NPY_1_PI
    cdef int nz = 0

    az = ccabs(z)
    arm = 1. + 3.+d1mach[0]
    rtr1 = sqrt(arm)
    il = min(2, n)
    dfnu = fnu + (n - il)
    raz = 1. / az
    st = zr.conjugate() * raz
    ak1 = rtpi*raz*st
    ak1 = ccsqrt(ak1)
    cz = z
    if kode != 2:
        pass
    else:
        cz = 0.

    if abs(cz.real) > elim:
        return -1
    dnu2 = dfnu + dfnu
    koded = 1

    if (abs(cz.real) > elim) and (n > 2):
        pass
    else:
        koded = 0
        st = ccexp(cz)
        ak1 *= st

    fdn = 0.
    if dnu2 > rtr1:
        fdn = dnu2*dnu2
    ez = zr*8
    aez = 8*az
    s = tol / aez
    jl = <int>(rl+rl+2)
    p1 = 0.
    if z.imag != 0.:
        inu = <int>fnu
        arg = (fnu - inu)*PI
        inu += n - il
        ak = -sin(arg)
        bk = cos(arg)
        if z.imag < 0:
            bk = -bk
        p1 = -p1

    for k in range(1, il+1):
        sqk = fdn - 1.
        atol = s*abs(sqk)
        sgn, cs1, cs2, ck, ak, aa = 1., 1., 1., 1., 0., 1.
        bb, dk = aez, ez

        for j in range(1, jl+1):
            st = ck/dk
            ck = st*sqk
            cs2 += ck
            sgn = -sgn
            cs1 += dk*sgn
            dk += ez
            aa *= abs(sqk)/bb
            bb += aez
            ak += 8.
            sqk -= ak
            if aa > atol:
                return -2

        s2 = cs1
        if (z.real + z.real < elim):
            tz = z + z
            st = ccexp(tz)
            st *= p1
            st *= cs2
            s2 += st

        fdn += 8.*dfnu + 4.
        p1 = -p1
        m = n - il + k
        y[m - 1] = s2*ak1

    if n < 2:
        return nz
    nn = n
    k = nn - 2
    ak = k
    st = z.conjugate()*raz
    rz = (st + st)*raz
    ib = 3
    for i in range(ib, nn+1):
        y[k - 1] = (ak + fnu)*(rz*y[k]) + y[k+1]
        ak -= 1.
        k -= 1

    if koded == 0:
        return nz

    ck = ccexp(cz)
    for i in range(1, nn):
        y[i - 1] *= ck

    return nz


# %% --------------------------------------------------------------------------- zkscl
cdef inline int zkscl(double complex zr, double fnu, int n, double complex *y,
                        double complex rz, double ascle, double tol, double elim
                        ) noexcept nogil:
    cdef int i, nw, kk
    cdef int nz = 0
    cdef int ic = 0
    cdef int nn = min(3, n+1)
    cdef double helim = 0.5*elim
    cdef double elm = exp(-elim)
    cdef double celmr = elm
    cdef double aas, acs, alas
    cdef double complex s1, cs, ck, zd
    cdef double complex[2] cy

    for i in range(nn):
        s1 = y[i]
        cy[i] = s1
        aas = ccabs(s1)
        acs = -zr.real + log(aas)
        nz += 1
        y[i] = 0.
        if (acs < -elim):
            continue

        cs = cclog(s1)
        cs -= zr
        cs = (exp(cs.real)/tol)*(cos(cs.imag) + 1.j*sin(cs.imag))
        if zuchk(cs, ascle, tol):
            continue
        y[i] = cs
        ic = i
        nz -= 1
    if n == 1:
        return nz
    if ic == 0:
        y[0] = 0.
        nz = 2

    if n == 0 or nz == 0:
        return 0
    fn = fnu + 1.
    ck = fn*rz
    s1 = cy[0]
    s2 = cy[1]
    zd = zr

    for i in range(2, n+1):
        kk = i
        cs = s2
        s2 = s1 + ck*cs
        s1 = cs
        ck += rz
        aas = ccabs(s2)
        alas = log(aas)
        acs = -zd.real + alas
        nz += 1
        y[i] = 0.
        if acs >= -elim:
            cs = cclog(s2)
            cs -= zd
            cs = (exp(cs.real)/tol)*(cos(cs.imag) + 1.j*sin(cs.imag))
            if zuchk(cs, ascle, tol):
                pass
            else:
                y[i] = cs
                nz -= 1
                if ic == kk - 1:
                    break
                ic = kk
        else:
            # 25
            if alas < helim:
                continue
            zd -= elim
            s1 *= celmr
            s2 *= celmr

    if ic != kk - 1:
        nz = n
        if ic == n:
            nz = n - 1
    else:
        nz = kk - 2

    for i in range(nz + 1):
        y[i] = 0.

    return nz


# %% --------------------------------------------------------------------------- zs1s2
cdef (double complex, # s1
      double complex, # s2
      int,            # nz
      int             # iuf
     ) zs1s2 (
    double complex zr,
    double complex s1,
    double complex s2,
    double ascle,
    double alim,
    int iuf
) noexcept nogil:
    cdef double as1 = ccabs(s1)
    cdef double as2 = ccabs(s2)
    cdef double aa = s1.real
    cdef double aln = s1.imag
    cdef double complex s1d
    cdef double complex c1
    cdef int nz = 0
    if (s1 != 0.) and (as1 != 0.):
        aln = -zr.real - zr.real + log(as1)
        s1d = s1
        s1 = 0.
        as1 = 0.
        if aln >= -alim:
            c1 = cclog(s1d)
            c1 -= zr
            c1 -= zr
            s1 = ccexp(c1)
            as1 = ccabs(s1)
            iuf += 1

    aa = max(as1, as2)
    if aa > ascle:
        return s1, s2, nz, iuf
    else:
        return 0., 0., 1, 0


# %% --------------------------------------------------------------------------- zuchk
cdef inline bint zuchk(double complex y, double ascle, double tol) noexcept nogil:
    cdef double st = min(abs(y.real), abs(y.imag))
    cdef double ss = max(abs(y.real), abs(y.imag))
    if st > ascle:
        return False
    else:
        st /= tol
        return True if ss < st else False


# %% --------------------------------------------------------------------------- zunik
cdef struct ZunikVars:
    double complex Phi
    double complex Zeta1
    double complex Zeta2
    double complex Sum
    double complex[16] Cwrkr
    double fnu
    double tol
    int ikflg
    int ipmtr
    int init


cdef inline void zunik(double complex zr, ZunikVars *Z) noexcept nogil:
    cdef double ac, rfn, test
    cdef double complex cfn, crfn, t, t2, s, sr, zn
    cdef int j, k, ind
    cdef double[2] con = [3.98942280401432678e-01,  1.25331413731550025e+00]

    if Z.init == 0:
        rfn = 1. / Z.fnu
        test = d1mach[0]*1e3
        ac = Z.fnu*test
        if (abs(zr.real) <= ac) and (abs(zr.imag) <= ac):
            Z.Zeta1 = 2.*abs(log(test)) + Z.fnu
            Z.Zeta2 = Z.fnu
            Z.Phi = 1.
            return

        t = zr*rfn
        s = 1 + t*t
        sr = ccsqrt(s)
        zn = (1. + sr) / t
        Z.Zeta1 = Z.fnu * cclog(zn)
        Z.Zeta2 = Z.fnu * sr
        t = 1. / sr
        sr = t * rfn
        Z.Cwrkr[15] = ccsqrt(sr)
        Z.Phi = Z.Cwrkr[15] * con[Z.ikflg]

        if Z.ipmtr > 0:
            return

        t2 = 1. / s
        Z.Cwrkr[0] = 1.
        crfn, ac, ind= 1., 1., 1

        for k in range(2, 16):
            s = 0.
            for j in range(1, k+1):
                ind += 1
                s *= t2
                s += zunik_c[ind-1]
            crfn *= sr
            Z.Cwrkr[k-1] = crfn*s
            ac *= rfn
            test = abs(Z.Cwrkr[k-1].real) + abs(Z.Cwrkr[k-1].imag)
            if (ac < Z.tol) and (test < Z.tol):
                break

        Z.init = k

    s, t = 0., 1.
    if Z.ikflg == 2:
        for j in range(Z.init + 1):
            s += t * Z.Cwrkr[j]
            t = -t
        Z.Sum = s
        Z.Phi = Z.Cwrkr[15]*con[1]
        return
    else:
        for j in range(Z.init+1):
            s += Z.Cwrkr[j]
        Z.Sum = s
        Z.Phi = Z.Cwrkr[15]*con[0]
        return


# %% --------------------------------------------------------------------------- zunhj
cdef inline (
    double complex,  # phi
    double complex,  # arg
    double complex,  # zeta1
    double complex,  # zeta2
    double complex,  # asum
    double complex   # bsum
    ) zunhj (
    double complex z,
    double fnu,
    int ipmtr,
    double tol
) noexcept nogil:
    """
    If ipmtr is =1 then asum, bsum are not computed and returned zero.
    """

    cdef double complex suma, sumb, st, w, w2, za, zc, zb, zd, zr, tfn
    cdef double complex zeta = 0.
    cdef double complex asum = 0.
    cdef double complex bsum = 0.
    # Scratch arrays
    cdef double[30] ap
    cdef double complex[30] p
    cdef double complex[30] up
    cdef double complex[14] cr
    cdef double complex[14] dr

    cdef double ex1 = 1./3.
    cdef double ex2 = 2./3.
    cdef double hpi = PI_2
    cdef double gpi = PI
    cdef double thpi = PI + PI_2
    cdef double rfnu, rfnu2, fn13, fn23, rfn13, test, ac, aw, raw, aw2, raw2
    cdef int jr, ju, k, kmax, kp1, ks, l1, l2, lr, lrp1, L
    rfnu = 1. / fnu

    # Overflow test (z/fnu too small)
    test = d1mach[0]*1e3
    ac = fnu*test

    if (abs(z.real) <= ac) and (abs(z.imag) <= ac ):
        zeta1 = 2.*abs(log(test)) + fnu
        zeta2 = fnu
        phi = 1.
        arg = 1.
        return phi, arg, zeta1, zeta2, asum, bsum

    # Compute in the fourth quadrant
    zb = z * rfnu
    rfnu2 = rfnu*rfnu

    fn13 = fnu**ex1
    fn23 = fn13 * fn13
    rfn13 = 1. / fn13
    w2 = 1. - zb*zb
    aw2 = ccabs(w2)

    if aw2 <= 0.25:
        # Power series for abs(w2) <= 0.25
        k = 1
        p[0] = 1.
        suma = zunhj_gama[0]
        ap[0] = 1.
        if aw2 >= tol:
            for k in range(2, 31):
                p[k-1] = p[k-2]*w2
                suma += p[k-1]*zunhj_gama[k-1]
                ap[k-1] = ap[k-2]*aw2
                if ap[k-1] < tol:
                    break
    # 20
        kmax = k
        zeta = w2*suma
        arg = zeta*fn23
        za = ccsqrt(suma)
        zeta2 = ccsqrt(w2)*fnu
        zeta1 =  (ex2*zeta*za + 1.)*zeta2
        za += za
        phi = ccsqrt(za)*rfn13

        if ipmtr == 1:
            return phi, arg, zeta1, zeta2, asum, bsum

        #  Sum series for asum and bsum
        sumb = 0.
        for k in range(kmax):
            sumb += p[k]*zunhj_beta[k]
    # 30
        asum = 0.
        bsum = sumb
        l1, l2, pp, ias, ibs = 0, 30, 1., 0, 0
        atol, btol = tol, tol*(abs(bsum.real) + abs(bsum.imag))
        if rfnu2 >= tol:
            for inds in range(1,7):
                atol /= rfnu2
                pp *= rfnu2
                if ias != 1:
                    suma = 0.
                    for k in range(kmax):
                        suma += p[k]*zunhj_alfa[l1 + k]
                        if ap[k] < atol:
                            break
                    asum += suma * pp
                    if pp < tol:
                        ias = 1
    # 60
                if ibs != 1:
                    sumb = 0.
                    for k in range(kmax):
                        sumb += p[k]*zunhj_beta[l2 + k]
                        if ap[k] < atol:
                            break
                    bsum += sumb * pp
                    if pp < tol:
                        ibs = 1
                if (ias == 1) and (ibs == 1):
                    break

                l1 += 30
                l2 += 30
    # 110
        asum += 1.
        pp = rfnu*rfn13
        bsum *= pp
        return phi, arg, zeta1, zeta2, asum, bsum

    else:  # abs(w2) > 0.25
        w = ccsqrt(w2)
        if w.real < 0:
            w.real = 0.
        if w.imag < 0:
            w.imag = 0.

        za = (1 + w) / zb
        zc = cclog(za)
        if zc.real < 0:
            zc.real = 0.
        if zc.imag < 0:
            zc.imag = 0.
        if zc.imag > hpi:
            zc.imag = hpi

        zth = (zc - w)*1.5
        zeta1 = zc*fnu
        zeta2 = w*fnu
        azth = ccabs(zth)
        ang = thpi

        if (zth.real < 0.) or (zth.imag >= 0.):
            ang = hpi
            if zth.real != 0.:
                ang = atan(zth.imag/zth.real)
            if zth.real < 0.:
                ang += gpi

        #140
        pp = azth**ex2
        ang *= ex2
        zeta.real = pp * cos(ang)
        zeta.imag = pp * sin(ang)
        if zeta.imag < 0:
            zeta.imag = 0.
        arg = zeta*fn23
        rtzt = zth / zeta
        za = rtzt / w
        phi = ccsqrt(za + za)*rfn13

        if ipmtr == 1:
            return phi, arg, zeta1, zeta2, asum, bsum

        tfn = rfnu / w
        rzth = rfnu / zth
        zc = rzth*zunhj_ar[1]
        t2 = 1 / w2
        up[1] = (t2*zunhj_c[1] + zunhj_c[2])*tfn
        bsum = up[1] + zc
        asum = 0.
        if rfnu >= tol:
            przth = rzth
            ptfn = tfn
            up[0] = 1.
            pp = 1.
            btol = tol*(abs(bsum.real) + abs(bsum.imag))
            ks, kp1, L, ias, ibs = 0, 2, 3, 0, 0
    # 210 loop
            for lr in range(2, 13, 2):
                lrp1 = lr + 1
                # Compute two additional cr, dr, and up for
                # two more terms in next suma and sumb
                for k in range(lr, lr+2):
                    ks += 1
                    kp1 += 1
                    L += 1
                    za = zunhj_c[L-1]

                    for j in range(2, kp1 + 1):
                        L += 1
                        za = (za * t2) + zunhj_c[L-1]

                    ptfn *= tfn
                    up[kp1 - 1] = ptfn*za
                    cr[ks - 1] = przth*zunhj_br[ks]
                    przth *= rzth
                    dr[ks - 1] = przth*zunhj_ar[ks+1]

                pp *= rfnu2
                if ias != 1:
                    suma = up[lrp1-1]
                    ju = lrp1
                    for jr in range(1, lr+1):
                        ju -= 1
                        suma += cr[jr - 1]*up[ju - 1]

                    asum += suma
                    test = abs(suma.real) + abs(suma.imag)
                    if (pp < tol) and (test < tol):
                        ias = 1

                if ibs != 1:
                    sumb = up[lr+1] + up[lr]*zc
                    ju = lrp1
                    for jr in range(1, lr+1):
                        ju -= 1
                        sumb += dr[jr - 1]*up[ju - 1]

                    bsum += sumb
                    test = abs(sumb.real) + abs(sumb.imag)
                    if (pp < tol) and (test < tol):
                        ias = 1

                if (ias == 1) and (ibs == 1):
                    break
    # 220
        asum += 1.
        bsum = -bsum*rfn13 / rtzt
        return phi, arg, zeta1, zeta2, asum, bsum


# %% --------------------------------------------------------------------------- zuoik
cdef inline int zuoik(double complex z,
                       double fnu,
                       int kode,
                       int ikflg,
                       int n,
                       double complex *y,
                       double tol,
                       double elim,
                       double alim
                      ) noexcept nogil:

    cdef double aargh, aphi, ax, ay, gnu, fnn, gnn, rcz
    cdef int i, idum, iform, init, nw
    cdef int nn = n
    cdef int nuf = 0,
    cdef double complex phi, arg, zeta1, zeta2, asum, bsum
    cdef double complex zr = z
    cdef double aic = 1.265512123484645396  # log(2*sqrt(pi))
    cdef ZunikVars Z

    if z.real < 0.:
        zr = -z
    zb = zr
    ax = abs(z.real)*sqrt(3.)
    ay = abs(z.imag)
    iform = 1
    if ay > ax:
        iform = 2
    gnu = max(fnu, 1.)
    if ikflg != 1:
        gnu = max(fnu + nn - 1, nn)

    if iform == 2:
        zn = zr.conjugate()
        if z.imag <= 0.:
            zn.real = -zn.real
        phi, arg, zeta1, zeta2, asum, bsum = zunhj(zn, fnu=gnu, ipmtr=1, tol=tol)
        cz = zeta2 - zeta1
        aargh = ccabs(arg)

    else:
        Z.init = 0
        Z.fnu = gnu
        Z.tol = tol
        Z.ikflg = ikflg
        Z.ipmtr = 1
        zunik(zr, &Z)
        phi, zeta1, zeta2 = (Z.Phi, Z.Zeta1, Z.Zeta2)
        cz = zeta2 - zeta1

    # 50
    if kode != 1:
        cz -= zb
    if ikflg != 1:
        cz = -cz
    # 70
    aphi = ccabs(phi)
    rcz = cz.real

    if rcz > elim:
        return -1

    # reconvene at 130
    if rcz >= alim:
        rcz += log(aphi)
        if (iform == 2):
            rcz -= 0.25*log(aargh) + aic
        if rcz > elim:
            return -1
    else:
    # 80  UNDERFLOW TEST
        if rcz < -elim:
    # 90
            for i in range(nn):
                y[i] = 0.
            return nn

        if rcz > -alim:
            pass  # goto 130
        else:
            rcz += log(aphi)
            if iform == 2:
                rcz -= 0.25*log(aargh) + aic

            if rcz <= -elim:
                # 90
                for i in range(nn):
                    y[i] = 0.
                return nn

            ascle = 1.+3.*d1mach[0]/tol
            cz += cclog(phi)
            if iform != 1:
                cz -= 0.25*cclog(arg) - aic

            #120
            ax = exp(rcz)/tol
            ay = cz.imag
            cz = ax*(cos(ay)+1.j*sin(ay))
            if zuchk(cz, ascle, tol):
                # 90
                for i in range(nn):
                    y[i] = 0.
                return nn
    # 130
    if (ikflg == 2) or (n == 1):
        return nuf

    while True:
    # 140
        gnu = fnu + nn - 1
        if iform == 2:
            phi, arg, zeta1, zeta2, asum, bsum = zunhj(zn, fnu=gnu, ipmtr=1, tol=tol)
            cz = zeta2 - zeta1
            aargh = ccabs(arg)
        else:
            Z.init, Z.fnu, Z.ipmtr = 0, gnu, 1
            zunik(zr, &Z)
            phi, zeta1, zeta2 = (Z.Phi, Z.Zeta1, Z.Zeta2)
            cz = zeta2 - zeta1

        if kode == 2:
            cz -= zb

        # 170
        aphi = ccabs(phi)
        rcz = cz.real

        if rcz >= -elim:
            if rcz > -alim:
                return nuf
            rcz += log(aphi)
            if iform == 2:
                rcz -= 0.25*log(aargh) + aic

            if rcz > -elim:
                ascle = 1.+3.*d1mach[0]/tol
                cz += cclog(phi)
                if iform != 1:
                    cz -= 0.25*cclog(arg) + aic

            # 200
            ax = exp(rcz)/tol
            ay = cz.imag
            cz = ax*(cos(ay)+1.j*sin(ay))
            if not (zuchk(cz, ascle, tol)):
                return nuf

        # 180
        y[nn - 1] = 0.
        nn -= 1
        nuf += 1
        if nn == 0:
            return nuf


# %% --------------------------------------------------------------------------- zunk1
cdef inline int zunk1 (double complex z,
                       double fnu,
                       int kode,
                       int mr,
                       int n,
                       double complex *y,
                       int nz,
                       double tol,
                       double elim,
                       double alim) noexcept nogil:
    cdef double ang, aphi, asc, ascle, cpn, c2i, c2m, c2r
    cdef double fmr, fn, fnf, rs1, sgn, spn

    cdef int i, ib, iflag, ifn, il, init, inu, iuf, k, kdflg, kflag
    cdef int kk, nw, initd, ic, ipard, j
    cdef bint cond1, cond2
    cdef double complex zr = z
    cdef double cscl = tol
    cdef double crsc = 1. / tol

    cdef double[3] bry = [1+3.*d1mach[0]/tol, 1 / (1+3.*d1mach[0]/tol), d1mach[1]]
    cdef double[3] css = [cscl, 1., crsc]
    cdef double[3] csr = [crsc, 1., cscl]
    cdef double complex[2] cy
    cdef ZunikVars ZVar1, ZVar2, ZVar3
    # Initialize the Zunik structs
    ZVar1.ikflg = 2
    ZVar1.ipmtr = 0
    ZVar1.tol = tol
    ZVar2.ikflg = 2
    ZVar2.ipmtr = 0
    ZVar2.tol = tol
    ZVar3.ikflg = 2
    ZVar3.tol = tol

    for i in range(16):
        ZVar1.Cwrkr[i] = 0.
        ZVar2.Cwrkr[i] = 0.
        ZVar3.Cwrkr[i] = 0.

    kdflg = 0
    nz = 0
    if z.real < 0.:
        zr = -z
    j = 2
    for i in range(1, n+1):
        # j flip-flops between 1 and 2
        j = 3 - j
        fn = fnu + (i-1)

        if j == 1:
            ZVar1.init = 0
            ZVar1.fnu = fn
            zunik(zr, &ZVar1)
        else:
            ZVar2.init = 0
            ZVar2.fnu = fn
            zunik(zr, &ZVar2)

        if kode != 1:
            cfn = fn
            if j == 1:
                s1 = ZVar1.Zeta1 - cfn * (cfn/(zr + ZVar1.Zeta2))
            else:
                s1 = ZVar2.Zeta1 - cfn * (cfn/(zr + ZVar2.Zeta2))
        else:
            if j == 1:
                s1 = ZVar1.Zeta1 - ZVar1.Zeta2
            else:
                s1 = ZVar2.Zeta1 - ZVar2.Zeta2

        rs1 = s1.real
        if abs(rs1) <= elim:
            if kdflg == 1:
                kdflg = 2
            if abs(rs1) >= alim:
                # refine test and scale
                aphi = abs(ZVar1.Phi if j == 1 else ZVar2.Phi)
                rs1 += log(aphi)
                if abs(rs1) > elim:
                    # For z.real < 0, the I function to be added will overflow
                    if rs1 > 0. or z.real < 0.:
                        return -1
                    kdflg = 1
                    y[i-1] = 0.
                    nz += 1
                    if i > 1 and y[i-2] != 0.:
                        y[i-2] = 0.
                        nz += 1
                    continue
                if kdflg == 1:
                    kflag = 1
                if rs1 >= 0. and kdflg == 1:
                    kflag = 3
            # Scale s1 to keep intermediate arithmetic on scale near
            # exponent extremes
            if j == 1:
                s2 = ZVar1.Phi * ZVar1.Sum
            else:
                s2 = ZVar2.Phi * ZVar2.Sum
            c2r = s1.real
            c2i = s1.imag
            c2m = exp(c2r)*css[kflag-1]
            s1 = c2m * (cos(c2i) + 1.j*sin(c2i))
            s2 *= s1
            if kflag == 1:
                if zuchk(s2, bry[0], tol):
                    if rs1 > 0. or z.real < 0.:
                        return -1
                    kdflg = 1
                    y[i-1] = 0.
                    nz += 1
                    if i > 1 and y[i-2] != 0.:
                        y[i-2] = 0.
                        nz += 1
                    continue
            cy[kdflg-1] = s2
            y[i-1] = s2*csr[kflag-1]
            if kdflg == 2:
                break
            kdflg = 2
            continue

        if rs1 > 0. or z.real < 0.:
            return -1
        kdflg = 1
        y[i-1] = 0.
        nz += 1
        if i > 1 and y[i-2] != 0.:
            y[i-2] = 0.
            nz += 1

    rz = 2. / zr
    ck = fn * rz
    ib = i+1
    if n >= ib:
        # test last member for underflow and overflow,
        # set sequence to zero on underflow
        fn = fnu + (n-1)
        ipard = 1
        if mr != 0:
            ipard = 0
        ZVar3.init = 0
        ZVar3.fnu = fn
        ZVar3.ipmtr = ipard
        if kode != 1:
            cfn = fn
            s1 = ZVar3.Zeta1 - cfn * (cfn / (zr + ZVar3.Zeta2))
        else:
            s1 = ZVar3.Zeta1 - ZVar3.Zeta2

        rs1 = s1.real
        if abs(rs1) <= elim:
            if abs(rs1) < alim:
                pass
            else:
                aphi = abs(ZVar3.Phi)
                rs1 += log(aphi)

            if abs(rs1) < elim:
                pass
            else:
                if (rs1 > 0.) or (z.real < 0.):
                    return -1
                for i in range(n):
                    y[i] = 0.
                return n

        s1 = cy[0]
        s2 = cy[1]
        c1 = csr[kflag-1]
        ascle = bry[kflag-1]
        for i in range(ib, n+1):
            c2 = s2
            s2 = ck*s2 + s1
            s1 = c2
            ck += rz
            c2 = s2 * c1
            y[i-1] = c2
            if (kflag < 3):
                c2m = max(abs(c2.real), (c2.imag))
                if c2m > ascle:
                    kflag += 1
                    ascle = bry[kflag-1]
                    s1 *= c1
                    s2 = c2
                    s1 *= css[kflag-1]
                    s2 *= css[kflag-1]
                    c1 = csr[kflag-1]
    if mr == 0:
        return nz
    # Analytic continuation for z.real < 0.
    nz = 0
    fmr = mr
    sgn = - PI if fmr < 0 else PI
    csgn = sgn*1.j
    inu = <int>fnu
    fnf = fnu - inu
    ifn = inu + n - 1
    ang = fnf * sgn
    cspn = cos(ang) + sin(ang)*1.j
    if ifn % 2 == 1:
        cspn = -cspn
    asc = bry[0]
    kk = n
    iuf = 0
    kdflg = 1
    ib = ib - 1
    ic = ib - 1

    for k in range(1, n+1):
        fn = fnu + (kk - 1)
        # Logic to sort out the cases whose parameters were set for the
        # k function above
        m = 3

        # Explicitly combining if cases to untangle multiple nested gotos
        cond1 = ((kk == n) and (ib < n))
        cond2 = ((kk == ib) or (kk == ic))

        if n > 2 and cond1:
            # Do nothing jump to 180
            pass
        elif (n > 2 and (not cond1) and cond2) or n <= 2:
            # do 172 and then 180
            ZVar3.init = ZVar2.init if j == 2 else ZVar1.init
            m = j
            j = 3 - j
        elif n > 2 and (not cond1) and (not cond2):
            # Fall through continue to 180
            ZVar3.init = 0
    # 180
        zunik(zr, &ZVar3)

        if kode != 1:
            cfn = fn
            s1 = -ZVar3.Zeta1 + cfn * (cfn / (ZVar3.Zeta2 + zr))
        else:
            s1 = ZVar3.Zeta2 - ZVar3.Zeta1

        rs1 = s1.real
        if abs(rs1) > elim:
            # goto 260
            if rs1 > 0.:
                return -1
            s2 = 0.
            # goto 230
        else:
            if kdflg == 1:
                iflag = 2
            if abs(rs1) >= alim:
                # Refine Test and Scale
                aphi = abs(ZVar3.Phi)
                rs1 += log(aphi)
                if abs(rs1) > elim:
                    # goto 260
                    if rs1 > 0:
                        return -1
                    s2 = 0.
                    # goto 230
                else:
                    if kdflg == 1:
                        iflag = 1
                    if rs1 >= 0.:
                        if kdflg == 1:
                            iflag = 3
                        s2 = csgn * ZVar3.Phi * ZVar3.Sum
                        c2r = s1.real
                        c2i = s1.imag
                        c2m = exp(c2r)*css[kflag-1]
                        s1 = c2m * (cos(c2i) + 1.j*sin(c2i))
                        s2*= s1
                        if iflag == 1:
                            if zuchk(s2, bry[0], tol):
                                s2 = 0.
            else:
                s2 = csgn * ZVar3.Phi * ZVar3.Sum
                c2r = s1.real
                c2i = s1.imag
                c2m = exp(c2r)*css[kflag-1]
                s1 = c2m * (cos(c2i) + 1.j*sin(c2i))
                s2*= s1
                if iflag == 1:
                    if zuchk(s2, bry[0], tol):
                        s2 = 0.
    # 230
        cy[kdflg-1] = s2
        c2 = s2
        s2 *= csr[iflag-1]
        # Add I and K functions K sequence in y[i-1], i = 1,n
        s1 = y[kk - 1]
        if kode != 1:
            s1, s2, nw, iuf = zs1s2(zr, s1, s2, ascle, alim, iuf)
            nz += nw
        y[kk - 1] = s1*cspn + s2
        kk -= 1
        cspn = -cspn
        if c2 == 0.:
            kdflg = 1
            continue

        if kdflg == 2:
            break
        kdflg = 2

    # 275
    il = n - k
    if il == 0:
        return nz
    # recur backward for remainder of I sequence and add in the
    # K functions, scaling the I sequence during recurrence to keep
    # intermediate arithmetic on scale near exponent extremes.
    s1 = cy[0]
    s2 = cy[1]
    cs = csr[iflag-1]
    ascle = bry[iflag-1]
    fn = inu + il
    for i in range(1, il+1):
        c2 = s2
        s2 = s1 + (fn + fnf)*rz*s2
        s1 = c2
        fn -= 1.
        c2 = s2*cs
        ck = c2
        c1 = y[kk-1]
        if kode != 1:
            c1, c2, nw, iuf = zs1s2(zr, c1, c2, ascle, alim, iuf)
            nz += nw
        y[kk - 1] = c1*cspn + c2
        kk -= 1
        cspn = -cspn
        if iflag < 3:
            c2m = max(abs(ck.real), abs(ck.imag))
            if c2m > ascle:
                iflag += 1
                ascle = bry[iflag - 1]
                s1 *= cs
                s2 = ck
                s1 *= css[iflag - 1]
                s2 *= css[iflag - 1]
                cs = csr[iflag -1]

    return nz
